const ReportCase = require('../models/ReportCase');
const Transaction = require('../models/Transaction');
const facebookService = require('./facebookService');
const { generateCaseId } = require('../utils/generator');

class ReportService {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà
    async startNewReport(userId, message, transactionId = null) {
        try {
            console.log('Starting new report for user:', userId, 'transaction:', transactionId);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const existingOpenCase = await ReportCase.findOne({
            userId,
            status: 'open'
            });
            
            if (existingOpenCase) {
            await facebookService.sendMessage(
                userId, 
                `‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (Case ID: ${existingOpenCase.caseId})\n\n` +
                `üí¨ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /close ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô`
            );
            return existingOpenCase;
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            const caseId = generateCaseId();
            const reportCase = new ReportCase({
            userId,
            caseId,
            transactionId,
            messages: [{
                senderId: userId,
                role: 'user',
                text: message
            }],
            status: 'open'
            });
            
            await reportCase.save();
            console.log('Report saved to database with ID:', caseId);
            
            // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            await facebookService.sendMessage(
            userId,
            `üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n\n` +
            `üÜî Case ID: ${caseId}\n` +
            `üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message}\n\n` +
            `üõ†Ô∏è ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ\n` +
            `üí¨ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /close ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô`
            );
            
            // ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
            await this.notifyAdminNewReport(reportCase);
            console.log('Admin notified for new report');
            
            return reportCase;
        } catch (error) {
            console.error('Start new report error:', error);
            throw error;
        }
    }
  
  // ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    async notifyAdminNewReport(reportCase) {
    const adminId = process.env.ADMIN_FB_ID;
    console.log('Notifying admin:', adminId);
    
    if (!adminId) {
        console.warn('ADMIN_FB_ID not set, cannot notify admin');
        return;
    }
    
    try {
        let message = `üö® ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà\n\n`;
        message += `üÜî Case ID: ${reportCase.caseId}\n`;
        message += `üë§ User ID: ${reportCase.userId}\n`;
        
        if (reportCase.transactionId) {
        message += `üìã Transaction ID: ${reportCase.transactionId}\n`;
        }
        
        message += `üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${reportCase.messages[0].text}\n\n`;
        message += `üí¨ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢: /reply ${reportCase.caseId} [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]`;
        
        console.log('Sending admin notification:', message);
        await facebookService.sendMessage(adminId, message);
        console.log('Admin notification sent successfully');
    } catch (error) {
        console.error('Error notifying admin:', error);
    }
    }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  async addUserMessage(userId, caseId, message) {
    try {
      const reportCase = await ReportCase.findOne({ caseId, userId });
      
      if (!reportCase) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ');
      }
      
      if (reportCase.status === 'closed') {
        await facebookService.sendMessage(
          userId,
          `‚ùå ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (Case ID: ${caseId})\n\n` +
          `üìû ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ /report`
        );
        return;
      }
      
      reportCase.messages.push({
        senderId: userId,
        role: 'user',
        text: message
      });
      
      await reportCase.save();
      
      // ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
      await this.notifyAdminNewMessage(reportCase, message);
      
      await facebookService.sendMessage(
        userId,
        `‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n\n` +
        `üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message}\n\n` +
        `üõ†Ô∏è ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö..`
      );
      
      return reportCase;
    } catch (error) {
      console.error('Add user message error:', error);
      throw error;
    }
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  async addAdminMessage(adminId, caseId, message) {
    try {
      const reportCase = await ReportCase.findOne({ caseId });
      
      if (!reportCase) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ');
      }
      
      reportCase.messages.push({
        senderId: adminId,
        role: 'admin',
        text: message
      });
      
      reportCase.adminId = adminId;
      await reportCase.save();
      
      // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await facebookService.sendMessage(
        reportCase.userId,
        `üì© ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n\n` +
        `üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message}\n\n` +
        `üìû ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /report`
      );
      
      return reportCase;
    } catch (error) {
      console.error('Add admin message error:', error);
      throw error;
    }
  }
  
  // ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  async closeReport(userId, caseId) {
    try {
    const adminId = process.env.ADMIN_FB_ID;
      const reportCase = await ReportCase.findOne({ caseId, adminId : adminId });
      
      if (!reportCase) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ');
      }
      
      reportCase.status = 'closed';
      await reportCase.save();
      
      await facebookService.sendMessage(
        reportCase.userId,
        `‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Case ID: ${caseId})\n\n` +
        `üìû ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ /report`
      );
      
      // ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      if (adminId) {
        await facebookService.sendMessage(
          adminId,
          `‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡πâ‡∏ß\n\n` +
          `üÜî Case ID: ${caseId}\n` +
          `üë§ User ID: ${userId}`
        );
      }
      
      return reportCase;
    } catch (error) {
      console.error('Close report error:', error);
      throw error;
    }
  }

    // ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  async notifyAdminNewMessage(reportCase, newMessage) {
    const adminId = process.env.ADMIN_FB_ID;
    if (!adminId) return;
    
    let message = `üí¨ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤\n\n`;
    message += `üÜî Case ID: ${reportCase.caseId}\n`;
    message += `üë§ User ID: ${reportCase.userId}\n`;
    
    if (reportCase.transactionId) {
      message += `üìã Transaction ID: ${reportCase.transactionId}\n`;
    }
    
    message += `üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà: ${newMessage}\n\n`;
    message += `üí¨ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢: /reply ${reportCase.caseId} [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]`;
    
    await facebookService.sendMessage(adminId, message);
  }
  
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    async getReportHistory(userId, limit = 10) {
    try {
        const reports = await ReportCase.find({ 
        userId: userId 
        })
        .sort({ createdAt: -1 })
        .limit(limit)
        .exec(); // ‡πÉ‡∏ä‡πâ .exec() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ Promise
        
        return reports || []; // Á°Æ‰øù return array ‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    } catch (error) {
        console.error('Get report history error:', error);
        return []; // return array ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô null
    }
    }
  
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    async getOpenReports(userId) {
        try {
            const reports = await ReportCase.find({ 
            userId: userId, 
            status: 'open' 
            }).sort({ createdAt: -1 }).exec();
            
            return reports || [];
        } catch (error) {
            console.error('Get open reports error:', error);
            return [];
        }
    }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    async hasOpenReport(userId) {
        try {
            const report = await ReportCase.findOne({ 
            userId: userId, 
            status: 'open' 
            }).exec();
            
            return report || null;
        } catch (error) {
            console.error('Check open report error:', error);
            return null;
        }
    }
}

module.exports = new ReportService();